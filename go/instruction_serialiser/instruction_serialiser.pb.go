// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.14.0
// source: instruction_serialiser.proto

package instruction_serialiser

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InstructionWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Wrapper:
	//	*InstructionWrapper_ArithmeticWrapper
	//	*InstructionWrapper_LogicalWrapper
	Wrapper isInstructionWrapper_Wrapper `protobuf_oneof:"wrapper"`
}

func (x *InstructionWrapper) Reset() {
	*x = InstructionWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruction_serialiser_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstructionWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstructionWrapper) ProtoMessage() {}

func (x *InstructionWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_instruction_serialiser_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstructionWrapper.ProtoReflect.Descriptor instead.
func (*InstructionWrapper) Descriptor() ([]byte, []int) {
	return file_instruction_serialiser_proto_rawDescGZIP(), []int{0}
}

func (m *InstructionWrapper) GetWrapper() isInstructionWrapper_Wrapper {
	if m != nil {
		return m.Wrapper
	}
	return nil
}

func (x *InstructionWrapper) GetArithmeticWrapper() *ArithmeticResultNodeWrapper {
	if x, ok := x.GetWrapper().(*InstructionWrapper_ArithmeticWrapper); ok {
		return x.ArithmeticWrapper
	}
	return nil
}

func (x *InstructionWrapper) GetLogicalWrapper() *LogicalResultNodeWrapper {
	if x, ok := x.GetWrapper().(*InstructionWrapper_LogicalWrapper); ok {
		return x.LogicalWrapper
	}
	return nil
}

type isInstructionWrapper_Wrapper interface {
	isInstructionWrapper_Wrapper()
}

type InstructionWrapper_ArithmeticWrapper struct {
	ArithmeticWrapper *ArithmeticResultNodeWrapper `protobuf:"bytes,1,opt,name=arithmetic_wrapper,json=arithmeticWrapper,proto3,oneof"`
}

type InstructionWrapper_LogicalWrapper struct {
	LogicalWrapper *LogicalResultNodeWrapper `protobuf:"bytes,2,opt,name=logical_wrapper,json=logicalWrapper,proto3,oneof"`
}

func (*InstructionWrapper_ArithmeticWrapper) isInstructionWrapper_Wrapper() {}

func (*InstructionWrapper_LogicalWrapper) isInstructionWrapper_Wrapper() {}

type ArithmeticResultNodeWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Node:
	//	*ArithmeticResultNodeWrapper_AddNode
	//	*ArithmeticResultNodeWrapper_DivideNode
	//	*ArithmeticResultNodeWrapper_MultiplyNode
	//	*ArithmeticResultNodeWrapper_NumberNode
	//	*ArithmeticResultNodeWrapper_SubtractNode
	//	*ArithmeticResultNodeWrapper_VariableNode
	//	*ArithmeticResultNodeWrapper_LogarithmNode
	//	*ArithmeticResultNodeWrapper_PowerNode
	//	*ArithmeticResultNodeWrapper_ModuloNode
	Node isArithmeticResultNodeWrapper_Node `protobuf_oneof:"node"`
}

func (x *ArithmeticResultNodeWrapper) Reset() {
	*x = ArithmeticResultNodeWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruction_serialiser_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArithmeticResultNodeWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArithmeticResultNodeWrapper) ProtoMessage() {}

func (x *ArithmeticResultNodeWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_instruction_serialiser_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArithmeticResultNodeWrapper.ProtoReflect.Descriptor instead.
func (*ArithmeticResultNodeWrapper) Descriptor() ([]byte, []int) {
	return file_instruction_serialiser_proto_rawDescGZIP(), []int{1}
}

func (m *ArithmeticResultNodeWrapper) GetNode() isArithmeticResultNodeWrapper_Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (x *ArithmeticResultNodeWrapper) GetAddNode() *AddNode {
	if x, ok := x.GetNode().(*ArithmeticResultNodeWrapper_AddNode); ok {
		return x.AddNode
	}
	return nil
}

func (x *ArithmeticResultNodeWrapper) GetDivideNode() *DivideNode {
	if x, ok := x.GetNode().(*ArithmeticResultNodeWrapper_DivideNode); ok {
		return x.DivideNode
	}
	return nil
}

func (x *ArithmeticResultNodeWrapper) GetMultiplyNode() *MultiplyNode {
	if x, ok := x.GetNode().(*ArithmeticResultNodeWrapper_MultiplyNode); ok {
		return x.MultiplyNode
	}
	return nil
}

func (x *ArithmeticResultNodeWrapper) GetNumberNode() *NumberNode {
	if x, ok := x.GetNode().(*ArithmeticResultNodeWrapper_NumberNode); ok {
		return x.NumberNode
	}
	return nil
}

func (x *ArithmeticResultNodeWrapper) GetSubtractNode() *SubtractNode {
	if x, ok := x.GetNode().(*ArithmeticResultNodeWrapper_SubtractNode); ok {
		return x.SubtractNode
	}
	return nil
}

func (x *ArithmeticResultNodeWrapper) GetVariableNode() *ArithmeticVariableNode {
	if x, ok := x.GetNode().(*ArithmeticResultNodeWrapper_VariableNode); ok {
		return x.VariableNode
	}
	return nil
}

func (x *ArithmeticResultNodeWrapper) GetLogarithmNode() *LogarithmNode {
	if x, ok := x.GetNode().(*ArithmeticResultNodeWrapper_LogarithmNode); ok {
		return x.LogarithmNode
	}
	return nil
}

func (x *ArithmeticResultNodeWrapper) GetPowerNode() *PowerNode {
	if x, ok := x.GetNode().(*ArithmeticResultNodeWrapper_PowerNode); ok {
		return x.PowerNode
	}
	return nil
}

func (x *ArithmeticResultNodeWrapper) GetModuloNode() *ModuloNode {
	if x, ok := x.GetNode().(*ArithmeticResultNodeWrapper_ModuloNode); ok {
		return x.ModuloNode
	}
	return nil
}

type isArithmeticResultNodeWrapper_Node interface {
	isArithmeticResultNodeWrapper_Node()
}

type ArithmeticResultNodeWrapper_AddNode struct {
	AddNode *AddNode `protobuf:"bytes,1,opt,name=add_node,json=addNode,proto3,oneof"`
}

type ArithmeticResultNodeWrapper_DivideNode struct {
	DivideNode *DivideNode `protobuf:"bytes,2,opt,name=divide_node,json=divideNode,proto3,oneof"`
}

type ArithmeticResultNodeWrapper_MultiplyNode struct {
	MultiplyNode *MultiplyNode `protobuf:"bytes,3,opt,name=multiply_node,json=multiplyNode,proto3,oneof"`
}

type ArithmeticResultNodeWrapper_NumberNode struct {
	NumberNode *NumberNode `protobuf:"bytes,4,opt,name=number_node,json=numberNode,proto3,oneof"`
}

type ArithmeticResultNodeWrapper_SubtractNode struct {
	SubtractNode *SubtractNode `protobuf:"bytes,5,opt,name=subtract_node,json=subtractNode,proto3,oneof"`
}

type ArithmeticResultNodeWrapper_VariableNode struct {
	VariableNode *ArithmeticVariableNode `protobuf:"bytes,6,opt,name=variable_node,json=variableNode,proto3,oneof"`
}

type ArithmeticResultNodeWrapper_LogarithmNode struct {
	LogarithmNode *LogarithmNode `protobuf:"bytes,7,opt,name=logarithm_node,json=logarithmNode,proto3,oneof"`
}

type ArithmeticResultNodeWrapper_PowerNode struct {
	PowerNode *PowerNode `protobuf:"bytes,8,opt,name=power_node,json=powerNode,proto3,oneof"`
}

type ArithmeticResultNodeWrapper_ModuloNode struct {
	ModuloNode *ModuloNode `protobuf:"bytes,9,opt,name=modulo_node,json=moduloNode,proto3,oneof"`
}

func (*ArithmeticResultNodeWrapper_AddNode) isArithmeticResultNodeWrapper_Node() {}

func (*ArithmeticResultNodeWrapper_DivideNode) isArithmeticResultNodeWrapper_Node() {}

func (*ArithmeticResultNodeWrapper_MultiplyNode) isArithmeticResultNodeWrapper_Node() {}

func (*ArithmeticResultNodeWrapper_NumberNode) isArithmeticResultNodeWrapper_Node() {}

func (*ArithmeticResultNodeWrapper_SubtractNode) isArithmeticResultNodeWrapper_Node() {}

func (*ArithmeticResultNodeWrapper_VariableNode) isArithmeticResultNodeWrapper_Node() {}

func (*ArithmeticResultNodeWrapper_LogarithmNode) isArithmeticResultNodeWrapper_Node() {}

func (*ArithmeticResultNodeWrapper_PowerNode) isArithmeticResultNodeWrapper_Node() {}

func (*ArithmeticResultNodeWrapper_ModuloNode) isArithmeticResultNodeWrapper_Node() {}

type LogicalResultNodeWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Node:
	//	*LogicalResultNodeWrapper_EqualNode
	//	*LogicalResultNodeWrapper_AndNode
	//	*LogicalResultNodeWrapper_BoolNode
	//	*LogicalResultNodeWrapper_NegateNode
	//	*LogicalResultNodeWrapper_OrNode
	//	*LogicalResultNodeWrapper_XorNode
	//	*LogicalResultNodeWrapper_VariableNode
	Node isLogicalResultNodeWrapper_Node `protobuf_oneof:"node"`
}

func (x *LogicalResultNodeWrapper) Reset() {
	*x = LogicalResultNodeWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruction_serialiser_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicalResultNodeWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalResultNodeWrapper) ProtoMessage() {}

func (x *LogicalResultNodeWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_instruction_serialiser_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalResultNodeWrapper.ProtoReflect.Descriptor instead.
func (*LogicalResultNodeWrapper) Descriptor() ([]byte, []int) {
	return file_instruction_serialiser_proto_rawDescGZIP(), []int{2}
}

func (m *LogicalResultNodeWrapper) GetNode() isLogicalResultNodeWrapper_Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (x *LogicalResultNodeWrapper) GetEqualNode() *EqualNode {
	if x, ok := x.GetNode().(*LogicalResultNodeWrapper_EqualNode); ok {
		return x.EqualNode
	}
	return nil
}

func (x *LogicalResultNodeWrapper) GetAndNode() *AndNode {
	if x, ok := x.GetNode().(*LogicalResultNodeWrapper_AndNode); ok {
		return x.AndNode
	}
	return nil
}

func (x *LogicalResultNodeWrapper) GetBoolNode() *BoolNode {
	if x, ok := x.GetNode().(*LogicalResultNodeWrapper_BoolNode); ok {
		return x.BoolNode
	}
	return nil
}

func (x *LogicalResultNodeWrapper) GetNegateNode() *NegateNode {
	if x, ok := x.GetNode().(*LogicalResultNodeWrapper_NegateNode); ok {
		return x.NegateNode
	}
	return nil
}

func (x *LogicalResultNodeWrapper) GetOrNode() *OrNode {
	if x, ok := x.GetNode().(*LogicalResultNodeWrapper_OrNode); ok {
		return x.OrNode
	}
	return nil
}

func (x *LogicalResultNodeWrapper) GetXorNode() *XorNode {
	if x, ok := x.GetNode().(*LogicalResultNodeWrapper_XorNode); ok {
		return x.XorNode
	}
	return nil
}

func (x *LogicalResultNodeWrapper) GetVariableNode() *LogicalVariableNode {
	if x, ok := x.GetNode().(*LogicalResultNodeWrapper_VariableNode); ok {
		return x.VariableNode
	}
	return nil
}

type isLogicalResultNodeWrapper_Node interface {
	isLogicalResultNodeWrapper_Node()
}

type LogicalResultNodeWrapper_EqualNode struct {
	EqualNode *EqualNode `protobuf:"bytes,1,opt,name=equal_node,json=equalNode,proto3,oneof"`
}

type LogicalResultNodeWrapper_AndNode struct {
	AndNode *AndNode `protobuf:"bytes,2,opt,name=and_node,json=andNode,proto3,oneof"`
}

type LogicalResultNodeWrapper_BoolNode struct {
	BoolNode *BoolNode `protobuf:"bytes,3,opt,name=bool_node,json=boolNode,proto3,oneof"`
}

type LogicalResultNodeWrapper_NegateNode struct {
	NegateNode *NegateNode `protobuf:"bytes,4,opt,name=negate_node,json=negateNode,proto3,oneof"`
}

type LogicalResultNodeWrapper_OrNode struct {
	OrNode *OrNode `protobuf:"bytes,5,opt,name=or_node,json=orNode,proto3,oneof"`
}

type LogicalResultNodeWrapper_XorNode struct {
	XorNode *XorNode `protobuf:"bytes,6,opt,name=xor_node,json=xorNode,proto3,oneof"`
}

type LogicalResultNodeWrapper_VariableNode struct {
	VariableNode *LogicalVariableNode `protobuf:"bytes,7,opt,name=variable_node,json=variableNode,proto3,oneof"`
}

func (*LogicalResultNodeWrapper_EqualNode) isLogicalResultNodeWrapper_Node() {}

func (*LogicalResultNodeWrapper_AndNode) isLogicalResultNodeWrapper_Node() {}

func (*LogicalResultNodeWrapper_BoolNode) isLogicalResultNodeWrapper_Node() {}

func (*LogicalResultNodeWrapper_NegateNode) isLogicalResultNodeWrapper_Node() {}

func (*LogicalResultNodeWrapper_OrNode) isLogicalResultNodeWrapper_Node() {}

func (*LogicalResultNodeWrapper_XorNode) isLogicalResultNodeWrapper_Node() {}

func (*LogicalResultNodeWrapper_VariableNode) isLogicalResultNodeWrapper_Node() {}

type AddNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftChild  *ArithmeticResultNodeWrapper `protobuf:"bytes,1,opt,name=left_child,json=leftChild,proto3" json:"left_child,omitempty"`
	RightChild *ArithmeticResultNodeWrapper `protobuf:"bytes,2,opt,name=right_child,json=rightChild,proto3" json:"right_child,omitempty"`
}

func (x *AddNode) Reset() {
	*x = AddNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruction_serialiser_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNode) ProtoMessage() {}

func (x *AddNode) ProtoReflect() protoreflect.Message {
	mi := &file_instruction_serialiser_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNode.ProtoReflect.Descriptor instead.
func (*AddNode) Descriptor() ([]byte, []int) {
	return file_instruction_serialiser_proto_rawDescGZIP(), []int{3}
}

func (x *AddNode) GetLeftChild() *ArithmeticResultNodeWrapper {
	if x != nil {
		return x.LeftChild
	}
	return nil
}

func (x *AddNode) GetRightChild() *ArithmeticResultNodeWrapper {
	if x != nil {
		return x.RightChild
	}
	return nil
}

type DivideNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftChild  *ArithmeticResultNodeWrapper `protobuf:"bytes,1,opt,name=left_child,json=leftChild,proto3" json:"left_child,omitempty"`
	RightChild *ArithmeticResultNodeWrapper `protobuf:"bytes,2,opt,name=right_child,json=rightChild,proto3" json:"right_child,omitempty"`
}

func (x *DivideNode) Reset() {
	*x = DivideNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruction_serialiser_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DivideNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DivideNode) ProtoMessage() {}

func (x *DivideNode) ProtoReflect() protoreflect.Message {
	mi := &file_instruction_serialiser_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DivideNode.ProtoReflect.Descriptor instead.
func (*DivideNode) Descriptor() ([]byte, []int) {
	return file_instruction_serialiser_proto_rawDescGZIP(), []int{4}
}

func (x *DivideNode) GetLeftChild() *ArithmeticResultNodeWrapper {
	if x != nil {
		return x.LeftChild
	}
	return nil
}

func (x *DivideNode) GetRightChild() *ArithmeticResultNodeWrapper {
	if x != nil {
		return x.RightChild
	}
	return nil
}

type MultiplyNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftChild  *ArithmeticResultNodeWrapper `protobuf:"bytes,1,opt,name=left_child,json=leftChild,proto3" json:"left_child,omitempty"`
	RightChild *ArithmeticResultNodeWrapper `protobuf:"bytes,2,opt,name=right_child,json=rightChild,proto3" json:"right_child,omitempty"`
}

func (x *MultiplyNode) Reset() {
	*x = MultiplyNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruction_serialiser_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiplyNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiplyNode) ProtoMessage() {}

func (x *MultiplyNode) ProtoReflect() protoreflect.Message {
	mi := &file_instruction_serialiser_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiplyNode.ProtoReflect.Descriptor instead.
func (*MultiplyNode) Descriptor() ([]byte, []int) {
	return file_instruction_serialiser_proto_rawDescGZIP(), []int{5}
}

func (x *MultiplyNode) GetLeftChild() *ArithmeticResultNodeWrapper {
	if x != nil {
		return x.LeftChild
	}
	return nil
}

func (x *MultiplyNode) GetRightChild() *ArithmeticResultNodeWrapper {
	if x != nil {
		return x.RightChild
	}
	return nil
}

type SubtractNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftChild  *ArithmeticResultNodeWrapper `protobuf:"bytes,1,opt,name=left_child,json=leftChild,proto3" json:"left_child,omitempty"`
	RightChild *ArithmeticResultNodeWrapper `protobuf:"bytes,2,opt,name=right_child,json=rightChild,proto3" json:"right_child,omitempty"`
}

func (x *SubtractNode) Reset() {
	*x = SubtractNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruction_serialiser_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubtractNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubtractNode) ProtoMessage() {}

func (x *SubtractNode) ProtoReflect() protoreflect.Message {
	mi := &file_instruction_serialiser_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubtractNode.ProtoReflect.Descriptor instead.
func (*SubtractNode) Descriptor() ([]byte, []int) {
	return file_instruction_serialiser_proto_rawDescGZIP(), []int{6}
}

func (x *SubtractNode) GetLeftChild() *ArithmeticResultNodeWrapper {
	if x != nil {
		return x.LeftChild
	}
	return nil
}

func (x *SubtractNode) GetRightChild() *ArithmeticResultNodeWrapper {
	if x != nil {
		return x.RightChild
	}
	return nil
}

type LogarithmNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftChild  *ArithmeticResultNodeWrapper `protobuf:"bytes,1,opt,name=left_child,json=leftChild,proto3" json:"left_child,omitempty"`
	RightChild *ArithmeticResultNodeWrapper `protobuf:"bytes,2,opt,name=right_child,json=rightChild,proto3" json:"right_child,omitempty"` // the base
}

func (x *LogarithmNode) Reset() {
	*x = LogarithmNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruction_serialiser_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogarithmNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogarithmNode) ProtoMessage() {}

func (x *LogarithmNode) ProtoReflect() protoreflect.Message {
	mi := &file_instruction_serialiser_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogarithmNode.ProtoReflect.Descriptor instead.
func (*LogarithmNode) Descriptor() ([]byte, []int) {
	return file_instruction_serialiser_proto_rawDescGZIP(), []int{7}
}

func (x *LogarithmNode) GetLeftChild() *ArithmeticResultNodeWrapper {
	if x != nil {
		return x.LeftChild
	}
	return nil
}

func (x *LogarithmNode) GetRightChild() *ArithmeticResultNodeWrapper {
	if x != nil {
		return x.RightChild
	}
	return nil
}

type PowerNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftChild  *ArithmeticResultNodeWrapper `protobuf:"bytes,1,opt,name=left_child,json=leftChild,proto3" json:"left_child,omitempty"`    // the base
	RightChild *ArithmeticResultNodeWrapper `protobuf:"bytes,2,opt,name=right_child,json=rightChild,proto3" json:"right_child,omitempty"` // the exponent
}

func (x *PowerNode) Reset() {
	*x = PowerNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruction_serialiser_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerNode) ProtoMessage() {}

func (x *PowerNode) ProtoReflect() protoreflect.Message {
	mi := &file_instruction_serialiser_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerNode.ProtoReflect.Descriptor instead.
func (*PowerNode) Descriptor() ([]byte, []int) {
	return file_instruction_serialiser_proto_rawDescGZIP(), []int{8}
}

func (x *PowerNode) GetLeftChild() *ArithmeticResultNodeWrapper {
	if x != nil {
		return x.LeftChild
	}
	return nil
}

func (x *PowerNode) GetRightChild() *ArithmeticResultNodeWrapper {
	if x != nil {
		return x.RightChild
	}
	return nil
}

type ModuloNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftChild  *ArithmeticResultNodeWrapper `protobuf:"bytes,1,opt,name=left_child,json=leftChild,proto3" json:"left_child,omitempty"`
	RightChild *ArithmeticResultNodeWrapper `protobuf:"bytes,2,opt,name=right_child,json=rightChild,proto3" json:"right_child,omitempty"`
}

func (x *ModuloNode) Reset() {
	*x = ModuloNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruction_serialiser_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuloNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuloNode) ProtoMessage() {}

func (x *ModuloNode) ProtoReflect() protoreflect.Message {
	mi := &file_instruction_serialiser_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuloNode.ProtoReflect.Descriptor instead.
func (*ModuloNode) Descriptor() ([]byte, []int) {
	return file_instruction_serialiser_proto_rawDescGZIP(), []int{9}
}

func (x *ModuloNode) GetLeftChild() *ArithmeticResultNodeWrapper {
	if x != nil {
		return x.LeftChild
	}
	return nil
}

func (x *ModuloNode) GetRightChild() *ArithmeticResultNodeWrapper {
	if x != nil {
		return x.RightChild
	}
	return nil
}

type NumberNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NumberNode) Reset() {
	*x = NumberNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruction_serialiser_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumberNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumberNode) ProtoMessage() {}

func (x *NumberNode) ProtoReflect() protoreflect.Message {
	mi := &file_instruction_serialiser_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumberNode.ProtoReflect.Descriptor instead.
func (*NumberNode) Descriptor() ([]byte, []int) {
	return file_instruction_serialiser_proto_rawDescGZIP(), []int{10}
}

func (x *NumberNode) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type ArithmeticVariableNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VariableName string `protobuf:"bytes,1,opt,name=variable_name,json=variableName,proto3" json:"variable_name,omitempty"`
}

func (x *ArithmeticVariableNode) Reset() {
	*x = ArithmeticVariableNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruction_serialiser_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArithmeticVariableNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArithmeticVariableNode) ProtoMessage() {}

func (x *ArithmeticVariableNode) ProtoReflect() protoreflect.Message {
	mi := &file_instruction_serialiser_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArithmeticVariableNode.ProtoReflect.Descriptor instead.
func (*ArithmeticVariableNode) Descriptor() ([]byte, []int) {
	return file_instruction_serialiser_proto_rawDescGZIP(), []int{11}
}

func (x *ArithmeticVariableNode) GetVariableName() string {
	if x != nil {
		return x.VariableName
	}
	return ""
}

type AndNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftChild  *LogicalResultNodeWrapper `protobuf:"bytes,1,opt,name=left_child,json=leftChild,proto3" json:"left_child,omitempty"`
	RightChild *LogicalResultNodeWrapper `protobuf:"bytes,2,opt,name=right_child,json=rightChild,proto3" json:"right_child,omitempty"`
}

func (x *AndNode) Reset() {
	*x = AndNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruction_serialiser_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndNode) ProtoMessage() {}

func (x *AndNode) ProtoReflect() protoreflect.Message {
	mi := &file_instruction_serialiser_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndNode.ProtoReflect.Descriptor instead.
func (*AndNode) Descriptor() ([]byte, []int) {
	return file_instruction_serialiser_proto_rawDescGZIP(), []int{12}
}

func (x *AndNode) GetLeftChild() *LogicalResultNodeWrapper {
	if x != nil {
		return x.LeftChild
	}
	return nil
}

func (x *AndNode) GetRightChild() *LogicalResultNodeWrapper {
	if x != nil {
		return x.RightChild
	}
	return nil
}

// The equal node compares arithmetic nodes only.
// If you want to determine equality of logical nodes use Xor followed by a negation.
type EqualNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftChild  *ArithmeticResultNodeWrapper `protobuf:"bytes,1,opt,name=left_child,json=leftChild,proto3" json:"left_child,omitempty"`
	RightChild *ArithmeticResultNodeWrapper `protobuf:"bytes,2,opt,name=right_child,json=rightChild,proto3" json:"right_child,omitempty"`
}

func (x *EqualNode) Reset() {
	*x = EqualNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruction_serialiser_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EqualNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EqualNode) ProtoMessage() {}

func (x *EqualNode) ProtoReflect() protoreflect.Message {
	mi := &file_instruction_serialiser_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EqualNode.ProtoReflect.Descriptor instead.
func (*EqualNode) Descriptor() ([]byte, []int) {
	return file_instruction_serialiser_proto_rawDescGZIP(), []int{13}
}

func (x *EqualNode) GetLeftChild() *ArithmeticResultNodeWrapper {
	if x != nil {
		return x.LeftChild
	}
	return nil
}

func (x *EqualNode) GetRightChild() *ArithmeticResultNodeWrapper {
	if x != nil {
		return x.RightChild
	}
	return nil
}

type NegateNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Child *LogicalResultNodeWrapper `protobuf:"bytes,1,opt,name=child,proto3" json:"child,omitempty"`
}

func (x *NegateNode) Reset() {
	*x = NegateNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruction_serialiser_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NegateNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NegateNode) ProtoMessage() {}

func (x *NegateNode) ProtoReflect() protoreflect.Message {
	mi := &file_instruction_serialiser_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NegateNode.ProtoReflect.Descriptor instead.
func (*NegateNode) Descriptor() ([]byte, []int) {
	return file_instruction_serialiser_proto_rawDescGZIP(), []int{14}
}

func (x *NegateNode) GetChild() *LogicalResultNodeWrapper {
	if x != nil {
		return x.Child
	}
	return nil
}

type OrNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftChild  *LogicalResultNodeWrapper `protobuf:"bytes,1,opt,name=left_child,json=leftChild,proto3" json:"left_child,omitempty"`
	RightChild *LogicalResultNodeWrapper `protobuf:"bytes,2,opt,name=right_child,json=rightChild,proto3" json:"right_child,omitempty"`
}

func (x *OrNode) Reset() {
	*x = OrNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruction_serialiser_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrNode) ProtoMessage() {}

func (x *OrNode) ProtoReflect() protoreflect.Message {
	mi := &file_instruction_serialiser_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrNode.ProtoReflect.Descriptor instead.
func (*OrNode) Descriptor() ([]byte, []int) {
	return file_instruction_serialiser_proto_rawDescGZIP(), []int{15}
}

func (x *OrNode) GetLeftChild() *LogicalResultNodeWrapper {
	if x != nil {
		return x.LeftChild
	}
	return nil
}

func (x *OrNode) GetRightChild() *LogicalResultNodeWrapper {
	if x != nil {
		return x.RightChild
	}
	return nil
}

type XorNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftChild  *LogicalResultNodeWrapper `protobuf:"bytes,1,opt,name=left_child,json=leftChild,proto3" json:"left_child,omitempty"`
	RightChild *LogicalResultNodeWrapper `protobuf:"bytes,2,opt,name=right_child,json=rightChild,proto3" json:"right_child,omitempty"`
}

func (x *XorNode) Reset() {
	*x = XorNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruction_serialiser_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XorNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XorNode) ProtoMessage() {}

func (x *XorNode) ProtoReflect() protoreflect.Message {
	mi := &file_instruction_serialiser_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XorNode.ProtoReflect.Descriptor instead.
func (*XorNode) Descriptor() ([]byte, []int) {
	return file_instruction_serialiser_proto_rawDescGZIP(), []int{16}
}

func (x *XorNode) GetLeftChild() *LogicalResultNodeWrapper {
	if x != nil {
		return x.LeftChild
	}
	return nil
}

func (x *XorNode) GetRightChild() *LogicalResultNodeWrapper {
	if x != nil {
		return x.RightChild
	}
	return nil
}

type BoolNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BoolNode) Reset() {
	*x = BoolNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruction_serialiser_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolNode) ProtoMessage() {}

func (x *BoolNode) ProtoReflect() protoreflect.Message {
	mi := &file_instruction_serialiser_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolNode.ProtoReflect.Descriptor instead.
func (*BoolNode) Descriptor() ([]byte, []int) {
	return file_instruction_serialiser_proto_rawDescGZIP(), []int{17}
}

func (x *BoolNode) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type LogicalVariableNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VariableName string `protobuf:"bytes,1,opt,name=variable_name,json=variableName,proto3" json:"variable_name,omitempty"`
}

func (x *LogicalVariableNode) Reset() {
	*x = LogicalVariableNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruction_serialiser_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicalVariableNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalVariableNode) ProtoMessage() {}

func (x *LogicalVariableNode) ProtoReflect() protoreflect.Message {
	mi := &file_instruction_serialiser_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalVariableNode.ProtoReflect.Descriptor instead.
func (*LogicalVariableNode) Descriptor() ([]byte, []int) {
	return file_instruction_serialiser_proto_rawDescGZIP(), []int{18}
}

func (x *LogicalVariableNode) GetVariableName() string {
	if x != nil {
		return x.VariableName
	}
	return ""
}

var File_instruction_serialiser_proto protoreflect.FileDescriptor

var file_instruction_serialiser_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x73, 0x65, 0x72, 0x22, 0xe2, 0x01, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x64, 0x0a,
	0x12, 0x61, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x73,
	0x65, 0x72, 0x2e, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x11, 0x61, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x57, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x42, 0x09, 0x0a, 0x07, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x22, 0xbd, 0x05, 0x0a, 0x1b,
	0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x08, 0x61,
	0x64, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x64, 0x69, 0x76,
	0x69, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x4b, 0x0a, 0x0d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x72,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52,
	0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a,
	0x0b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x55, 0x0a, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x73, 0x65,
	0x72, 0x2e, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x61,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x61, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x61, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x48,
	0x00, 0x52, 0x09, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x0b,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x6f, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x6f, 0x4e,
	0x6f, 0x64, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0xf9, 0x03, 0x0a, 0x18,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0a, 0x65, 0x71, 0x75, 0x61,
	0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x48,
	0x00, 0x52, 0x09, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x08,
	0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x6e, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x48,
	0x00, 0x52, 0x07, 0x61, 0x6e, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x62, 0x6f,
	0x6f, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x6e,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a,
	0x08, 0x78, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x58, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x48, 0x00, 0x52, 0x07, 0x78, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x48,
	0x00, 0x52, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x42,
	0x06, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x52, 0x0a, 0x0a, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x72,
	0x2e, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x09, 0x6c, 0x65,
	0x66, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x54, 0x0a, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x52, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x22, 0xb6, 0x01,
	0x0a, 0x0a, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x52, 0x0a, 0x0a,
	0x6c, 0x65, 0x66, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x65, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x57, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64,
	0x12, 0x54, 0x0a, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x41,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x0a, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x22, 0xb8, 0x01, 0x0a, 0x0c, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x52, 0x0a, 0x0a, 0x6c, 0x65, 0x66, 0x74, 0x5f,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x52, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x54, 0x0a, 0x0b, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x65, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x57, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x22, 0xb8, 0x01, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x52, 0x0a, 0x0a, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x72, 0x2e,
	0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x09, 0x6c, 0x65, 0x66,
	0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x54, 0x0a, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x52, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x22, 0xb9, 0x01, 0x0a,
	0x0d, 0x4c, 0x6f, 0x67, 0x61, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x52,
	0x0a, 0x0a, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x12, 0x54, 0x0a, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x72,
	0x2e, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x0a, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x09, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x52, 0x0a, 0x0a, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x73, 0x65, 0x72, 0x2e, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52,
	0x09, 0x6c, 0x65, 0x66, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x54, 0x0a, 0x0b, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65,
	0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x57, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x52, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64,
	0x22, 0xb6, 0x01, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x52, 0x0a, 0x0a, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x12, 0x54, 0x0a, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x73, 0x65,
	0x72, 0x2e, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x0a, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x22, 0x22, 0x0a, 0x0a, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3d, 0x0a,
	0x16, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xad, 0x01, 0x0a,
	0x07, 0x41, 0x6e, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x6c, 0x65, 0x66, 0x74,
	0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x09,
	0x6c, 0x65, 0x66, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x51, 0x0a, 0x0b, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x52, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x22, 0xb5, 0x01, 0x0a,
	0x09, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x52, 0x0a, 0x0a, 0x6c, 0x65,
	0x66, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74,
	0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x57, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x52, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x54,
	0x0a, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x22, 0x54, 0x0a, 0x0a, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x57, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x22, 0xac, 0x01, 0x0a, 0x06, 0x4f,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x73,
	0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x09, 0x6c, 0x65, 0x66,
	0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x51, 0x0a, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x0a, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x22, 0xad, 0x01, 0x0a, 0x07, 0x58, 0x6f,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x73,
	0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x09, 0x6c, 0x65, 0x66,
	0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x51, 0x0a, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x0a, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x22, 0x20, 0x0a, 0x08, 0x42, 0x6f, 0x6f,
	0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3a, 0x0a, 0x13, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x48, 0x5a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x69, 0x63, 0x6f, 0x31, 0x35, 0x31, 0x39, 0x39, 0x39,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x73, 0x65,
	0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_instruction_serialiser_proto_rawDescOnce sync.Once
	file_instruction_serialiser_proto_rawDescData = file_instruction_serialiser_proto_rawDesc
)

func file_instruction_serialiser_proto_rawDescGZIP() []byte {
	file_instruction_serialiser_proto_rawDescOnce.Do(func() {
		file_instruction_serialiser_proto_rawDescData = protoimpl.X.CompressGZIP(file_instruction_serialiser_proto_rawDescData)
	})
	return file_instruction_serialiser_proto_rawDescData
}

var file_instruction_serialiser_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_instruction_serialiser_proto_goTypes = []interface{}{
	(*InstructionWrapper)(nil),          // 0: instruction_serialiser.InstructionWrapper
	(*ArithmeticResultNodeWrapper)(nil), // 1: instruction_serialiser.ArithmeticResultNodeWrapper
	(*LogicalResultNodeWrapper)(nil),    // 2: instruction_serialiser.LogicalResultNodeWrapper
	(*AddNode)(nil),                     // 3: instruction_serialiser.AddNode
	(*DivideNode)(nil),                  // 4: instruction_serialiser.DivideNode
	(*MultiplyNode)(nil),                // 5: instruction_serialiser.MultiplyNode
	(*SubtractNode)(nil),                // 6: instruction_serialiser.SubtractNode
	(*LogarithmNode)(nil),               // 7: instruction_serialiser.LogarithmNode
	(*PowerNode)(nil),                   // 8: instruction_serialiser.PowerNode
	(*ModuloNode)(nil),                  // 9: instruction_serialiser.ModuloNode
	(*NumberNode)(nil),                  // 10: instruction_serialiser.NumberNode
	(*ArithmeticVariableNode)(nil),      // 11: instruction_serialiser.ArithmeticVariableNode
	(*AndNode)(nil),                     // 12: instruction_serialiser.AndNode
	(*EqualNode)(nil),                   // 13: instruction_serialiser.EqualNode
	(*NegateNode)(nil),                  // 14: instruction_serialiser.NegateNode
	(*OrNode)(nil),                      // 15: instruction_serialiser.OrNode
	(*XorNode)(nil),                     // 16: instruction_serialiser.XorNode
	(*BoolNode)(nil),                    // 17: instruction_serialiser.BoolNode
	(*LogicalVariableNode)(nil),         // 18: instruction_serialiser.LogicalVariableNode
}
var file_instruction_serialiser_proto_depIdxs = []int32{
	1,  // 0: instruction_serialiser.InstructionWrapper.arithmetic_wrapper:type_name -> instruction_serialiser.ArithmeticResultNodeWrapper
	2,  // 1: instruction_serialiser.InstructionWrapper.logical_wrapper:type_name -> instruction_serialiser.LogicalResultNodeWrapper
	3,  // 2: instruction_serialiser.ArithmeticResultNodeWrapper.add_node:type_name -> instruction_serialiser.AddNode
	4,  // 3: instruction_serialiser.ArithmeticResultNodeWrapper.divide_node:type_name -> instruction_serialiser.DivideNode
	5,  // 4: instruction_serialiser.ArithmeticResultNodeWrapper.multiply_node:type_name -> instruction_serialiser.MultiplyNode
	10, // 5: instruction_serialiser.ArithmeticResultNodeWrapper.number_node:type_name -> instruction_serialiser.NumberNode
	6,  // 6: instruction_serialiser.ArithmeticResultNodeWrapper.subtract_node:type_name -> instruction_serialiser.SubtractNode
	11, // 7: instruction_serialiser.ArithmeticResultNodeWrapper.variable_node:type_name -> instruction_serialiser.ArithmeticVariableNode
	7,  // 8: instruction_serialiser.ArithmeticResultNodeWrapper.logarithm_node:type_name -> instruction_serialiser.LogarithmNode
	8,  // 9: instruction_serialiser.ArithmeticResultNodeWrapper.power_node:type_name -> instruction_serialiser.PowerNode
	9,  // 10: instruction_serialiser.ArithmeticResultNodeWrapper.modulo_node:type_name -> instruction_serialiser.ModuloNode
	13, // 11: instruction_serialiser.LogicalResultNodeWrapper.equal_node:type_name -> instruction_serialiser.EqualNode
	12, // 12: instruction_serialiser.LogicalResultNodeWrapper.and_node:type_name -> instruction_serialiser.AndNode
	17, // 13: instruction_serialiser.LogicalResultNodeWrapper.bool_node:type_name -> instruction_serialiser.BoolNode
	14, // 14: instruction_serialiser.LogicalResultNodeWrapper.negate_node:type_name -> instruction_serialiser.NegateNode
	15, // 15: instruction_serialiser.LogicalResultNodeWrapper.or_node:type_name -> instruction_serialiser.OrNode
	16, // 16: instruction_serialiser.LogicalResultNodeWrapper.xor_node:type_name -> instruction_serialiser.XorNode
	18, // 17: instruction_serialiser.LogicalResultNodeWrapper.variable_node:type_name -> instruction_serialiser.LogicalVariableNode
	1,  // 18: instruction_serialiser.AddNode.left_child:type_name -> instruction_serialiser.ArithmeticResultNodeWrapper
	1,  // 19: instruction_serialiser.AddNode.right_child:type_name -> instruction_serialiser.ArithmeticResultNodeWrapper
	1,  // 20: instruction_serialiser.DivideNode.left_child:type_name -> instruction_serialiser.ArithmeticResultNodeWrapper
	1,  // 21: instruction_serialiser.DivideNode.right_child:type_name -> instruction_serialiser.ArithmeticResultNodeWrapper
	1,  // 22: instruction_serialiser.MultiplyNode.left_child:type_name -> instruction_serialiser.ArithmeticResultNodeWrapper
	1,  // 23: instruction_serialiser.MultiplyNode.right_child:type_name -> instruction_serialiser.ArithmeticResultNodeWrapper
	1,  // 24: instruction_serialiser.SubtractNode.left_child:type_name -> instruction_serialiser.ArithmeticResultNodeWrapper
	1,  // 25: instruction_serialiser.SubtractNode.right_child:type_name -> instruction_serialiser.ArithmeticResultNodeWrapper
	1,  // 26: instruction_serialiser.LogarithmNode.left_child:type_name -> instruction_serialiser.ArithmeticResultNodeWrapper
	1,  // 27: instruction_serialiser.LogarithmNode.right_child:type_name -> instruction_serialiser.ArithmeticResultNodeWrapper
	1,  // 28: instruction_serialiser.PowerNode.left_child:type_name -> instruction_serialiser.ArithmeticResultNodeWrapper
	1,  // 29: instruction_serialiser.PowerNode.right_child:type_name -> instruction_serialiser.ArithmeticResultNodeWrapper
	1,  // 30: instruction_serialiser.ModuloNode.left_child:type_name -> instruction_serialiser.ArithmeticResultNodeWrapper
	1,  // 31: instruction_serialiser.ModuloNode.right_child:type_name -> instruction_serialiser.ArithmeticResultNodeWrapper
	2,  // 32: instruction_serialiser.AndNode.left_child:type_name -> instruction_serialiser.LogicalResultNodeWrapper
	2,  // 33: instruction_serialiser.AndNode.right_child:type_name -> instruction_serialiser.LogicalResultNodeWrapper
	1,  // 34: instruction_serialiser.EqualNode.left_child:type_name -> instruction_serialiser.ArithmeticResultNodeWrapper
	1,  // 35: instruction_serialiser.EqualNode.right_child:type_name -> instruction_serialiser.ArithmeticResultNodeWrapper
	2,  // 36: instruction_serialiser.NegateNode.child:type_name -> instruction_serialiser.LogicalResultNodeWrapper
	2,  // 37: instruction_serialiser.OrNode.left_child:type_name -> instruction_serialiser.LogicalResultNodeWrapper
	2,  // 38: instruction_serialiser.OrNode.right_child:type_name -> instruction_serialiser.LogicalResultNodeWrapper
	2,  // 39: instruction_serialiser.XorNode.left_child:type_name -> instruction_serialiser.LogicalResultNodeWrapper
	2,  // 40: instruction_serialiser.XorNode.right_child:type_name -> instruction_serialiser.LogicalResultNodeWrapper
	41, // [41:41] is the sub-list for method output_type
	41, // [41:41] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_instruction_serialiser_proto_init() }
func file_instruction_serialiser_proto_init() {
	if File_instruction_serialiser_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_instruction_serialiser_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstructionWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruction_serialiser_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArithmeticResultNodeWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruction_serialiser_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicalResultNodeWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruction_serialiser_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruction_serialiser_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DivideNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruction_serialiser_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiplyNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruction_serialiser_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubtractNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruction_serialiser_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogarithmNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruction_serialiser_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruction_serialiser_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuloNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruction_serialiser_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumberNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruction_serialiser_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArithmeticVariableNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruction_serialiser_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruction_serialiser_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EqualNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruction_serialiser_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NegateNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruction_serialiser_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruction_serialiser_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XorNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruction_serialiser_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoolNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruction_serialiser_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicalVariableNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_instruction_serialiser_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*InstructionWrapper_ArithmeticWrapper)(nil),
		(*InstructionWrapper_LogicalWrapper)(nil),
	}
	file_instruction_serialiser_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ArithmeticResultNodeWrapper_AddNode)(nil),
		(*ArithmeticResultNodeWrapper_DivideNode)(nil),
		(*ArithmeticResultNodeWrapper_MultiplyNode)(nil),
		(*ArithmeticResultNodeWrapper_NumberNode)(nil),
		(*ArithmeticResultNodeWrapper_SubtractNode)(nil),
		(*ArithmeticResultNodeWrapper_VariableNode)(nil),
		(*ArithmeticResultNodeWrapper_LogarithmNode)(nil),
		(*ArithmeticResultNodeWrapper_PowerNode)(nil),
		(*ArithmeticResultNodeWrapper_ModuloNode)(nil),
	}
	file_instruction_serialiser_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*LogicalResultNodeWrapper_EqualNode)(nil),
		(*LogicalResultNodeWrapper_AndNode)(nil),
		(*LogicalResultNodeWrapper_BoolNode)(nil),
		(*LogicalResultNodeWrapper_NegateNode)(nil),
		(*LogicalResultNodeWrapper_OrNode)(nil),
		(*LogicalResultNodeWrapper_XorNode)(nil),
		(*LogicalResultNodeWrapper_VariableNode)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_instruction_serialiser_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_instruction_serialiser_proto_goTypes,
		DependencyIndexes: file_instruction_serialiser_proto_depIdxs,
		MessageInfos:      file_instruction_serialiser_proto_msgTypes,
	}.Build()
	File_instruction_serialiser_proto = out.File
	file_instruction_serialiser_proto_rawDesc = nil
	file_instruction_serialiser_proto_goTypes = nil
	file_instruction_serialiser_proto_depIdxs = nil
}
